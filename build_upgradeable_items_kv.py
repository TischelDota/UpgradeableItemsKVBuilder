import sys
import os

input_dir = "./upgradeable_items/"
output_dir = "./upgradeable_items/_output/"


def parse_item_file(filename):
	# open file and write the header
	file = open(input_dir + filename)

	# item name
	itemName = file.readline().strip()[1:-1]

	# get ID, max level and specials
	itemBaseID = -1
	itemMaxLevel = -1
	itemCost = -1
	itemSpecials = {}
	parsingSpecials = False

	for line in file:
		if parsingSpecials:
			parse_item_specials(line, itemSpecials)
		else:
			if itemBaseID == -1:
				itemBaseID = parse_item_id(line)
			if itemMaxLevel == -1:
				itemMaxLevel = parse_item_max_level(line)
			if itemCost == -1:
				itemCost = parse_item_cost(line)

		if line.strip() == "\"AbilitySpecial\"":
			parsingSpecials = True

	# start output file
	file.seek(0)
	outputFile = open(output_dir + filename, "w")
	write_header(outputFile, filename)
	outputFile.writelines(file.readlines())

	# generate the item kv for all levels
	for lvl in range(2, itemMaxLevel + 1):
		file.seek(0)
		outputFile.write("\n\n")

		for line in file:
			# name, id and level
			line = replace_item_name(line, itemName, lvl)
			line = replace_item_id(line, itemBaseID, lvl)
			line = replace_item_level(line, lvl)

			# specials
			for key in itemSpecials:
				if len(itemSpecials[key]) > 1:
					line = replace_special(line, key, itemSpecials[key], lvl)

			# write line
			outputFile.write(line)

	# generate the item recipes
	itemBaseID += itemMaxLevel - 1
	for lvl in range(2, itemMaxLevel + 1):
		outputFile.write("\n\n")
		write_recipe(outputFile, itemName, itemBaseID, itemCost, lvl)


	file.close()
	outputFile.close()


def parse_item_id(line):
	line = line.strip()
	if line.startswith("\"ID\""):
		idString = line.split()[1]
		idString = idString[1:-1]
		return int(idString)

	return -1


def parse_item_max_level(line):
	line = line.strip()
	if line.startswith("\"MaxUpgradeLevel\""):
		lvlString = line.split()[1]
		lvlString = lvlString[1:-1]
		return int(lvlString)

	return -1


def parse_item_cost(line):
	line = line.strip()
	if line.startswith("\"ItemCost\""):
		lvlString = line.split()[1]
		lvlString = lvlString[1:-1]
		return int(lvlString)

	return -1


def parse_item_specials(line, itemSpecials):
	line = line.strip()
	if is_valid_special(line):
		key = line.split()[0][1:-1]
		valuesRaw = line[len(key)+2:].strip()
		valuesRaw = valuesRaw[1:-1]
		values = valuesRaw.split()

		itemSpecials[key] = values


def is_valid_special(line):
	if len(line.split()) < 2 or line.startswith("\"var_type\""):
		return False

	return True


def write_header(file, filename):
	file.write("// This file was autogenerated\n")
	file.write("// To change it's contents you should edit " + input_dir + filename + "\n")
	file.write("// Then run \"python build_upgradeable_items_kv.py\"\n\n")


def replace_item_name(line, itemName, itemLevel):
	return line.replace(itemName, itemName + "_" + str(itemLevel))


def replace_item_id(line, itemID, itemLevel):
	return line.replace(str(itemID), str(itemID + itemLevel - 1))


def replace_item_level(line, itemLevel):
	if "ItemBaseLevel" in line:
		return line.replace("1", str(itemLevel))

	return line


def replace_special(line, special, values, itemLevel):
	specialVariable = "%" + special
	if specialVariable in line:
		return line.replace(specialVariable, values[itemLevel - 1])

	return line


def write_recipe(file, itemName, itemID, itemCost, itemLevel):
	# item names
	resultItemName = itemName + "_" + str(itemLevel)
	previousItemName = itemName
	if itemLevel > 2:
		previousItemName = itemName + "_" + str(itemLevel - 1)

	recipeName = itemName.replace("item_", "item_recipe_") + "_" + str(itemLevel)

	# write
	file.write("\t\"" + recipeName + "\"\n")
	file.write("\t{\n")
	file.write("\t\t\"ID\"\t\t\t\t\t\"" + str(itemID + itemLevel - 1) + "\"\n")
	file.write("\t\t\"BaseClass\"\t\t\t\t\"item_recipe_arcane_boots\"\n")
	file.write("\t\t\"ItemCost\"\t\t\t\t\"" + str(itemCost) + "\"\n")
	file.write("\t\t\"ItemRecipe\"\t\t\t\"1\"\n")
	file.write("\t\t\"ItemResult\"\t\t\t\"" + resultItemName + "\"\n")
	file.write("\t\t\"ItemRequirements\"\n")
	file.write("\t\t{\n")
	file.write("\t\t\t\"01\"\t\t\t\t\"" + previousItemName + "\"\n")
	file.write("\t\t}\n")
	file.write("\t}\n")


def main():
	# check upgradeable_items folder exists
	if not os.path.exists(input_dir):
		print("Couldn't find " + input_dir)
		return

	# create output folder if needed
	if not os.path.exists(output_dir):
		os.makedirs(output_dir)

	# parse files
	for filename in os.listdir(input_dir):
		if filename.endswith(".txt"):
			parse_item_file(filename)

if __name__ == "__main__":
	main()